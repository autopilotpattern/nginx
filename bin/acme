#!/usr/bin/env bash

pushd `dirname $0` > /dev/null
SCRIPTPATH=`pwd -P`
popd > /dev/null

CONSUL_HOST_DEFAULT=${CONSUL:-consul}
if [ "${CONSUL_AGENT}" != "" ]; then
    CONSUL_HOST_DEFAULT="localhost"
fi
CONSUL_HOST=${CONSUL_HOST:-$CONSUL_HOST_DEFAULT}
CONSUL_ROOT="http://${CONSUL_HOST}:8500/v1"
CONSUL_KEY_ROOT="${CONSUL_ROOT}/kv/nginx"

SESSION_DIR_DEFAULT="/var/consul"
SESSION_DIR=${SESSION_DIR:-$SESSION_DIR_DEFAULT}
SESSION_FILE=${SESSION_DIR}/session

TEMP_CERT_DIR="/var/www/acme/ssl"
CERT_DIR="/var/www/ssl"

ACME_ENV=${ACME_ENV:-staging}

function getConsulSession () {
    if [ -f $SESSION_FILE ]; then 
        SID=$(cat ${SESSION_DIR}/session)
        local STATUS=$(curl -s ${CONSUL_ROOT}/session/info/${SID})
        if [ "${STATUS}" != "[]" ]; then
            echo $SID
            return 0
        else
            return 1
        fi
    else
        return 1
    fi
}

function renewConsulSession () {
    local SID="$(getConsulSession)"
    rc=$?
    if [ $rc -ne 0 ]; then 
        createConsulSession
        return $?
    else
        printf "Renewing Consul session ${SID}... "
        local STATUS=$(curl -s -o /dev/null -X PUT -w '%{http_code}' ${CONSUL_ROOT}/session/renew/${SID})
        if [ "${STATUS}" = "200" ]; then
            echo "complete"
            return 0
        else
            echo "failed"
            createConsulSession
            return $?
        fi
    fi
}

function createConsulSession () {
    printf "Creating Consul session... "
    local SID=$(curl -sX PUT -d '{"LockDelay":"0s","Name":"acme-lock","Behavior":"release","TTL":"5400s"}' ${CONSUL_ROOT}/session/create | awk -F  '"' '{print $4}')
    rc=$?
    if [[ $rc -ne 0 ]]; then
        echo "failed"
        return 1
    else
        echo $SID
        echo $SID > $SESSION_FILE
        return 0
    fi
}

function acquireLeader () {
    local SID="$(getConsulSession)"
    STATUS=$(curl -sX PUT -d "$(hostname)" "${CONSUL_KEY_ROOT}/acme/leader?acquire=${SID}")

    if [ "${STATUS}" = "true" ]; then
        echo "ACME leader claimed"
        return 0
    else
        echo "Failed to claim ACME leader"
        return 1
    fi
}

function generateChallengeToken () {
    IN=$1
    OUT=$2
    FILENAME="$(sed '1q;d' ${IN})"
    VALUE="$(sed '2q;d' ${IN})"
    LAST_FILENAME="$(sed '3q;d' ${IN})"

    if [ "${FILENAME}" ]; then
        echo "${VALUE}" > ${OUT}/${FILENAME}
    fi

    if [ "${LAST_FILENAME}" ]; then
        rm -f ${OUT}/${LAST_FILENAME}
    fi

    rm ${IN}
}

function updateKeys () {
    local TEMP_FULLCHAIN="${TEMP_CERT_DIR}/fullchain.pem"
    local TEMP_PRIVKEY="${TEMP_CERT_DIR}/privkey.pem"
    local FULLCHAIN="${CERT_DIR}/fullchain.pem"
    local PRIVKEY="${CERT_DIR}/privkey.pem"
    if [ -f ${TEMP_FULLCHAIN} -a -f ${TEMP_PRIVKEY} -a "$(cat ${TEMP_FULLCHAIN} 2> /dev/null)" != "" -a "$(cat ${TEMP_PRIVKEY} 2> /dev/null)" != "" ]; then
        cp -f $TEMP_FULLCHAIN $FULLCHAIN
        cp -f $TEMP_PRIVKEY $PRIVKEY
        $SCRIPTPATH/reload
    fi
}

case "$1" in
    get-consul-session)
        getConsulSession
        ;;
    create-consul-session)
        createConsulSession
        ;;
    renew-consul-session)
        renewConsulSession
        ;;
    acquire-leader)
        acquireLeader
        ;;
    watch)
        /usr/local/bin/consul-template -config /etc/acme/watch.hcl -consul $CONSUL_HOST:8500
        ;;
    init)
        if [ -f ${CERT_DIR}/fullchain.pem -a -f ${CERT_DIR}/privkey.pem ]; then
            exit 0
        fi
        shift
        renewConsulSession &&
        acquireLeader &&
        ${SCRIPTPATH}/dehydrated --cron --domain ${ACME_DOMAIN} --hook /etc/acme/dehydrated/hook.sh --config /etc/acme/dehydrated/config.${ACME_ENV}
        ;;
    renew-certs)
        shift
        renewConsulSession &&
        (acquireLeader || exit 0) &&
        ${SCRIPTPATH}/dehydrated --cron --domain ${ACME_DOMAIN} --hook /etc/acme/dehydrated/hook.sh --config /etc/acme/dehydrated/config.${ACME_ENV}
        ;;
    clean-certs)
        shift
        renewConsulSession &&
        (acquireLeader || exit 0) &&
        ${SCRIPTPATH}/dehydrated --cleanup --domain ${ACME_DOMAIN} --hook /etc/acme/dehydrated/hook.sh --config /etc/acme/dehydrated/config.${ACME_ENV}
        ;;
    generate-challenge-token)
        generateChallengeToken $2 $3
        ;;
    update-keys)
        updateKeys
        ;;
    checkin)
        renewConsulSession &&
        ( acquireLeader || exit 0 ) &&
        ${SCRIPTPATH}/dehydrated --cron --domain ${ACME_DOMAIN} --hook /etc/acme/dehydrated/hook.sh --config /etc/acme/dehydrated/config.${ACME_ENV} &&
        ${SCRIPTPATH}/dehydrated --cleanup --domain ${ACME_DOMAIN} --hook /etc/acme/dehydrated/hook.sh --config /etc/acme/dehydrated/config.${ACME_ENV}
        ;;
    *)
        echo $"Usage: $0 [ {get,create,renew}-consul-session | acquire-leader | init | checkin | renew-certs | clean-certs | generate-challenge-token ]"
        exit 1
        ;;
esac
