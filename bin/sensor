#!/bin/bash
set -e

# populated by calling scrape()
scraped=

help() {
    echo 'Make requests to the Nginx stub_status endpoint and pull out metrics'
    echo 'for the telemetry service. Refer to the Nginx docs for details:'
    echo 'http://nginx.org/en/docs/http/ngx_http_stub_status_module.html'
}

scrape() {
    scraped=$(curl -s --fail localhost/nginx-health)
}

# lets us make sure we only hit the Nginx health endpoint once
assert_scraped() {
    if [ -z "${scraped}" ]; then scrape; fi
}

# Cummulative number of dropped connections
unhandled() {
    assert_scraped
    local accepts handled connections_unhandled
    accepts=$(echo "$scraped" | awk 'FNR == 3 {print $1}')
    handled=$(echo "$scraped" | awk 'FNR == 3 {print $2}')
    connections_unhandled=$(expr ${accepts} - ${handled})
    /usr/local/bin/containerpilot \
        -putmetric \
        "nginx_connections_unhandled_total=$connections_unhandled"
}

# ratio of connections-in-use to available workers
connections_load() {
    assert_scraped
    local active waiting workers connections_load
    active=$(echo "$scraped" | awk '/Active connections/{print $3}')
    waiting=$(echo "$scraped" | awk '/Reading/{print $6}')
    workers=$(cat /etc/nginx/nginx.conf | perl -n -e'/worker_connections *(\d+)/ && print $1')
    connections_load=$(echo "scale=4; (${active} - ${waiting}) / ${workers}" | bc)
    /usr/local/bin/containerpilot \
        -putmetric \
        "nginx_connections_load=$connections_load"
}

# -------------------------------------------------------
# Un-scraped metrics; these raw metrics are available but we're not going
# to include them in the telemetry configuration. They have been left here
# as an example.

# The current number of active client connections including Waiting connections.
connections_active() {
    assert_scraped
    local connections_active
    connections_active=$(awk '/Active connections/{print $3}' scraped)
    /usr/local/bin/containerpilot \
        -putmetric \
        "nginx_connections_active=$connections_active"
}

# The current number of connections where nginx is reading the request header.
connections_reading() {
    assert_scraped
    local connections_reading
    connections_reading=$(awk '/Reading/{print $2}' scraped)
    /usr/local/bin/containerpilot \
        -putmetric \
        "nginx_connections_reading=$connections_reading"
}

# The current number of connections where nginx is writing the response back
# to the client.
connections_writing() {
    assert_scraped
    local connections_writing
    connections_writing=$(awk '/Reading/{print $4}' scraped)
    /usr/local/bin/containerpilot \
        -putmetric \
        "nginx_connections_writing=$connections_writing"
}

# The current number of idle client connections waiting for a request.
connections_waiting() {
    assert_scraped
    local connections_waiting
    connections_waiting=$(awk '/Reading/{print $6}' scraped)
    /usr/local/bin/containerpilot \
        -putmetric \
        "nginx_connections_waiting=$connections_waiting"
}

# The total number of accepted client connections.
accepts() {
    assert_scraped
    local accepts
    accepts=$(awk 'FNR == 3 {print $1}')
    /usr/local/bin/containerpilot \
        -putmetrics \
        "nginx_accepts=$accepts"
}

# The total number of handled connections. Generally, the parameter value is the
# same as accepts unless some resource limits have been reached (for example, the
# worker_connections limit).
handled() {
    assert_scraped
    local handled
    handled=$(awk 'FNR == 3 {print $2}')
    /usr/local/bin/containerpilot \
        -putmetrics \
        "nginx_handled=$handled"
}

# The total number of client requests.
requests() {
    assert_scraped
    local requests
    requests=$(awk 'FNR == 3 {print $3}')
    /usr/local/bin/containerpilot \
        -putmetrics \
        "nginx_requests=$requests"
}

# -------------------------------------------------------

cmd=$1
if [ ! -z "$cmd" ]; then
    shift 1
    $cmd "$@"
    exit
fi

# default behavior
scrape
unhandled
connections_load
